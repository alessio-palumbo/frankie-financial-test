definitions:
  errors.CustomError:
    properties:
      code:
        type: integer
      message:
        description: Description of what went wrong (if we can tell)
        example: Everything is wrong. Go fix it.
        type: string
    type: object
  handlers.Success:
    properties:
      puppy:
        description: Everyone gets a puppy if the SDK output is good.
        example: true
        type: boolean
    type: object
  models.DeviceCheckDetails:
    properties:
      activityData:
        description: |-
          A collection of loosely typed Key-Value-Pairs, which contain arbitrary data to be passed on to the verification services.
          The API will verify that:
          * the list of "Keys" provided are unique to the call (no double-ups)
          * that the Value provided matches the Type specified.

          Should the verification fail, the error message returned will include information for each KVP pair that fails
        items:
          $ref: '#/definitions/models.KeyValuePair'
        type: array
      activityType:
        description: |-
          The type of activity we're checking. Choices are:
          * SIGNUP: Used when an entity is signing up to your service
          * LOGIN: Used when an already registered entity is logging in to your service
          * PAYMENT: Used when you wish to check that all is well for a payment
          * CONFIRMATION: User has confirmed an action and you wish to double check they're still legitimate

          You can also supply vendor specific activityTypes if you know them. To do this, make the first character an underscore _.
          So for example, to use BioCatch's LOGIN_3 type, you can send "_LOGIN_3" as a value. Note, if you do this, there is no error checking on the Frankie side, and thus if you supply an incorrect value, the call will fail.
        enum:
        - SIGNUP
        - LOGIN
        - PAYMENT
        - CONFIRMATION
        type: string
      checkSessionKey:
        description: |-
          The unique session based ID that will be checked against the service.
          Service key must be unique or an error will be returned.
        type: string
      checkType:
        description: |-
          Describes the type of check service we need to verify with. Choices are:
          * DEVICE: Services that will be checking device characteristics
          * BIOMETRIC: Services that will be checking biomentric characteristics
          * COMBO: If you're using a service that combines both device and biometric information, use this.
        enum:
        - DEVICE
        - BIOMETRIC
        - COMBO
        type: string
    type: object
  models.KeyValuePair:
    properties:
      kvpKey:
        example: ip.address
        type: string
      kvpType:
        description: Used to describe the contents of the KVP data.
        enum:
        - general.string
        - general.integer
        - general.float
        - general.bool
        type: string
      kvpValue:
        example: 1.23.45.123
        type: string
    type: object
info:
  contact: {}
  description: This API allows developers to test the Universal SDK output to ensure it looks right.
  license: {}
  title: Frankie-Financial-Test
  version: "1.0"
paths:
  /isgood:
    post:
      consumes:
      - application/json
      description: |-
        Validate the payload and returns a puppy if successful.
        Otherwise it returns a status 500 error with a list of the violations.
      parameters:
      - description: An array of objects that contain the details from each different provider wrapped up in the Universal SDK.
        in: body
        name: deviceCheckDetails
        required: true
        schema:
          items:
            $ref: '#/definitions/models.DeviceCheckDetails'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: The data is fine. No issues, and everyone gets a puppy.
          schema:
            $ref: '#/definitions/handlers.Success'
        "500":
          description: The system is presently unavailable, or running in a severely degraded state. Check the error message for details
          schema:
            $ref: '#/definitions/errors.CustomError'
      summary: Simple check to see if the service is running smoothly.
swagger: "2.0"
