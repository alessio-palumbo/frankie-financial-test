// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-05-15 14:56:57.3229503 +1000 AEST m=+0.057951683

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/isgood": {
            "post": {
                "description": "Validate the payload and returns a puppy if successful.\nOtherwise it returns a status 500 error with a list of the violations.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Simple check to see if the service is running smoothly.",
                "parameters": [
                    {
                        "description": "An array of objects that contain the details from each different provider wrapped up in the Universal SDK.",
                        "name": "deviceCheckDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DeviceCheckDetails"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The data is fine. No issues, and everyone gets a puppy.",
                        "schema": {
                            "$ref": "#/definitions/handlers.Success"
                        }
                    },
                    "500": {
                        "description": "The system is presently unavailable, or running in a severely degraded state. Check the error message for details",
                        "schema": {
                            "$ref": "#/definitions/errors.CustomError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.CustomError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "description": "Description of what went wrong (if we can tell)",
                    "type": "string",
                    "example": "Everything is wrong. Go fix it."
                }
            }
        },
        "handlers.Success": {
            "type": "object",
            "properties": {
                "puppy": {
                    "description": "Everyone gets a puppy if the SDK output is good.",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.DeviceCheckDetails": {
            "type": "object",
            "properties": {
                "activityData": {
                    "description": "A collection of loosely typed Key-Value-Pairs, which contain arbitrary data to be passed on to the verification services.\nThe API will verify that:\n* the list of \"Keys\" provided are unique to the call (no double-ups)\n* that the Value provided matches the Type specified.\n\nShould the verification fail, the error message returned will include information for each KVP pair that fails",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.KeyValuePair"
                    }
                },
                "activityType": {
                    "description": "The type of activity we're checking. Choices are:\n* SIGNUP: Used when an entity is signing up to your service\n* LOGIN: Used when an already registered entity is logging in to your service\n* PAYMENT: Used when you wish to check that all is well for a payment\n* CONFIRMATION: User has confirmed an action and you wish to double check they're still legitimate\n\nYou can also supply vendor specific activityTypes if you know them. To do this, make the first character an underscore _.\nSo for example, to use BioCatch's LOGIN_3 type, you can send \"_LOGIN_3\" as a value. Note, if you do this, there is no error checking on the Frankie side, and thus if you supply an incorrect value, the call will fail.",
                    "type": "string",
                    "enum": [
                        "SIGNUP",
                        "LOGIN",
                        "PAYMENT",
                        "CONFIRMATION"
                    ]
                },
                "checkSessionKey": {
                    "description": "The unique session based ID that will be checked against the service.\nService key must be unique or an error will be returned.",
                    "type": "string"
                },
                "checkType": {
                    "description": "Describes the type of check service we need to verify with. Choices are:\n* DEVICE: Services that will be checking device characteristics\n* BIOMETRIC: Services that will be checking biomentric characteristics\n* COMBO: If you're using a service that combines both device and biometric information, use this.",
                    "type": "string",
                    "enum": [
                        "DEVICE",
                        "BIOMETRIC",
                        "COMBO"
                    ]
                }
            }
        },
        "models.KeyValuePair": {
            "type": "object",
            "properties": {
                "kvpKey": {
                    "type": "string",
                    "example": "ip.address"
                },
                "kvpType": {
                    "description": "Used to describe the contents of the KVP data.",
                    "type": "string",
                    "enum": [
                        "general.string",
                        "general.integer",
                        "general.float",
                        "general.bool"
                    ]
                },
                "kvpValue": {
                    "type": "string",
                    "example": "1.23.45.123"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Frankie-Financial-Test",
	Description: "This API allows developers to test the Universal SDK output to ensure it looks right.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
